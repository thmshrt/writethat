##\' ##END: example
##\'
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##END: examples
" %>% stringi::replace_all('^##','#')
library(magrittr)
text = "
##BEGIN: description
##\' {title placeholder}
##\'
##\' {description placeholder}
##\'
##\' @usage
##\' {usage placeholder}
##\'
##\' @param {param}   \\[{type}\\], {restrictions}
##\' @param {param}   \\[{type}\\], {restrictions}
##\'
##\' @return           [{type}]
##\'
##\' @export
##\' @importFrom magrittr %>%
##END: description
##BEGIN: code
myfun = function(
param1,
param2
) {
##BEGIN: setup params
##END: setup params
##BEGIN: param checks
##END: param checks
##BEGIN: computation
##END: computation
##BEGIN: return
##END: return
}
##END: code
##BEGIN: examples
##\' @examples
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##\'
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##\'
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##END: examples
" %>% stringi::replace_all('^##','#')
text = "
##BEGIN: description
##\' {title placeholder}
##\'
##\' {description placeholder}
##\'
##\' @usage
##\' {usage placeholder}
##\'
##\' @param {param}   \\[{type}\\], {restrictions}
##\' @param {param}   \\[{type}\\], {restrictions}
##\'
##\' @return           [{type}]
##\'
##\' @export
##\' @importFrom magrittr %>%
##END: description
##BEGIN: code
myfun = function(
param1,
param2
) {
##BEGIN: setup params
##END: setup params
##BEGIN: param checks
##END: param checks
##BEGIN: computation
##END: computation
##BEGIN: return
##END: return
}
##END: code
##BEGIN: examples
##\' @examples
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##\'
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##\'
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##END: examples
" %>% stringi::stri_replace_all('^##','#')
"##asdf" %>% stringi::stri_replace_all(replacement = '',regex = '^##')
text = "
##BEGIN: description
##\' {title placeholder}
##\'
##\' {description placeholder}
##\'
##\' @usage
##\' {usage placeholder}
##\'
##\' @param {param}   \\[{type}\\], {restrictions}
##\' @param {param}   \\[{type}\\], {restrictions}
##\'
##\' @return           [{type}]
##\'
##\' @export
##\' @importFrom magrittr %>%
##END: description
##BEGIN: code
myfun = function(
param1,
param2
) {
##BEGIN: setup params
##END: setup params
##BEGIN: param checks
##END: param checks
##BEGIN: computation
##END: computation
##BEGIN: return
##END: return
}
##END: code
##BEGIN: examples
##\' @examples
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##\'
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##\'
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##END: examples
" %>% stringi::stri_replace_all(replacement = '#',regex = '^##')
text
text = "
##BEGIN: description
##\' {title placeholder}
##\'
##\' {description placeholder}
##\'
##\' @usage
##\' {usage placeholder}
##\'
##\' @param {param}   \\[{type}\\], {restrictions}
##\' @param {param}   \\[{type}\\], {restrictions}
##\'
##\' @return           [{type}]
##\'
##\' @export
##\' @importFrom magrittr %>%
##END: description
##BEGIN: code
myfun = function(
param1,
param2
) {
##BEGIN: setup params
##END: setup params
##BEGIN: param checks
##END: param checks
##BEGIN: computation
##END: computation
##BEGIN: return
##END: return
}
##END: code
##BEGIN: examples
##\' @examples
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##\'
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##\'
##\' ##BEGIN: example
##\' ## {case description}
##\' {code placeholder}
##\' ##END: example
##END: examples
" %>% stringi::stri_replace_all(replacement = '\n#',regex = '\n##')
text
cat(text)
check()
rm(list=ls())
devtools::document()
devtools::build()
devtools::check()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::build()
knitr::opts_chunk$set(echo = TRUE,eval=FALSE)
library(rstudioapi)
rstudioapi::getActiveDocumentContext() -> con
con$path
con %>% str()
library(magrittr)
con %>% str()
con$selection
rstudioapi::getActiveDocumentContext() -> con
con %>% str()
con$selection
rstudioapi::insertText(location = con$selection,text = 'hi'. id = con$id)
rstudioapi::insertText(location = con$selection,text = 'hi', id = con$id)
con$selection
con$selection %>% str()
con$selection[[1]]
con$selection[[1]]$range
rstudioapi::insertText(location = con$selection[[1]]$range,text = 'hi', id = con$id)
# con %>% str()
con$selection[[1]]
# con %>% str()
con$selection %>% as.list()
# con %>% str()
con$selection %>% as.list()
# con %>% str()
con$selection[[1]]
# con %>% str()
con$selection[[1]]$range
insert_chunk = function() {
text = "
```{r}
```
"
rstudioapi::getActiveDocumentContext() -> con
}
insert_chunk = function() {
text = "
```{r}
print('print stuff here')
```
"
rstudioapi::getActiveDocumentContext() -> con
rstudioapi::insertText(location = con$selection[[1]]$range,
text = text,
id = con$id)
}
insert_chunk(
insert_chunk()
con$selection[[1]]$range
con$selection[[1]]$range
con$selection[[1]]$range[1]
con$selection[[1]]$range$start
con$selection[[1]]$range$start = c(1,1)
con$selection[[1]]$range$start
rstudioapi::as.document_position(c(1,1))
insert_chunk()
insert_chunk = function() {
text = "
```{r}
print('print stuff here')
\```
"
rstudioapi::getActiveDocumentContext() -> con
rstudioapi::insertText(location = con$selection[[1]]$range,
text = text,
id = con$id)
}
insert_chunk()
rstudioapi::getActiveDocumentContext() -> context
context$selection[[1]]
context$selection[[1]]
context$selection[[1]]$range[1]
context$selection[[1]]$range[1][1]
context$selection[[1]]$range[1]
context$selection[[1]]$range[1]$start[1]
context$selection[[1]]$range[1]$start$row
context$selection[[1]]$range[1]$start['row']
context$selection[[1]]$range[1]$start['col']
context$selection[[1]]$range[1]$start
context$selection[[1]]$range[1]$start %>% names()
context$selection[[1]]$range[1]$start['column']
context
insert_replace = function(
text = "
```{r}
print('print stuff here')
\```
"
rstudioapi::getActiveDocumentContext() -> context
context$selection[[1]]$range[1]$start['column'] = 1
)
insert_replace = function(
text = "
```{r}
print('print stuff here')
\```
"
rstudioapi::getActiveDocumentContext() -> context
context$selection[[1]]$range[1]$start['column'] = 1
)
insert_replace = function(
text = "
```{r}
print('print stuff here')
\```
"
rstudioapi::getActiveDocumentContext() -> context
context$selection[[1]]$range[1]$start['column'] = 1
)
insert_replace = function() {
text = "
```{r}
print('print stuff here')
\```
"
rstudioapi::getActiveDocumentContext() -> context
context$selection[[1]]$range[1]$start['column'] = 1
)
rstudioapi::getActiveDocumentContext() -> context
rstudioapi::modifyRange()
```
insert_replace = function() {
text = "
```{r}
print('print stuff here')
\```
"
rstudioapi::getActiveDocumentContext() -> context
context$selection[[1]]$range[1]$start['column'] = 1
)
insert_replace = function() {
insert_replace = function() {
text = "
```{r}
print('print stuff here')
```
"
rstudioapi::getActiveDocumentContext() -> context
context$selection[[1]]$range[1]$start['column'] = 1
}
insert_replace = function() {
text = "
```{r}
print('print stuff here')
\```
"
rstudioapi::getActiveDocumentContext() -> context
context$selection[[1]]$range[1]$start['column'] = 1
}
insert_chunk()
'\`' %>% print()
'\`' %>% cat()
rstudioapi::getActiveDocumentContext() -> context
context$selection
rstudioapi::getActiveDocumentContext() -> context
context$selection
?rstudioapi::modifyRange()
rstudioapi::insertText('\rhi')
rstudioapi::insertText('^hi')
rstudioapi::insertText('^hi')
context
rstudioapi::getActiveDocumentContext() -> context
context$path
context$path %>% readr::read_lines()
context$selection[[1]]$range[1]$start['row'] -> line
context$path %>%
readr::read_lines() %>%
`[`(lines)
context$selection[[1]]$range[1]$start['row'] -> i_line
context$path %>%
readr::read_lines() %>%
`[`(i_line)
context$path %>%
readr::read_lines() %>%
`[`(i_line) %>%
stringi::stri_length()
context$selection[[1]]$range[1]$start['row'] -> line_index
rstudioapi::getActiveDocumentContext() -> context
context$path %>%
readr::read_lines() %>%
`[`(line_index) %>%
stringi::stri_length() -> line_len
line_len
start_position = rstudioapi::as.document_position(line_index,1)
rstudioapi::as.document_position(line_index,1)
rstudioapi::as.document_position(c(line_index,1))
start_position = rstudioapi::as.document_position(c(line_index,1))
Map(c, Map(c, 1:5, 1), Map(c, 1:5, 3))
# insert text at the start of the document
insertText(c(1, 1), "# Hello\n")
# insert text at the start of the document
insertText(c(1, 1), "# Hello\n")
# insert text at the end of the document
insertText(Inf, "# Hello\n")
insertText(pos, "# ")
# uncomment the first 5 rows, undoing the previous action
rng <- Map(c, Map(c, 1:5, 1), Map(c, 1:5, 3))
modifyRange(rng, "")
start_position = rstudioapi::as.document_position(c(line_index,1))
# end
end_position = rstudioapi::as.document_position(c(line_index,Inf))
rstudioapi::as.document_range(start_position,end_position)
doc_range = rstudioapi::as.document_range(c(start_position,end_position))
doc_range
insert_replace = function() {
text = "
```{r}
print('print stuff here')
\```
"
rstudioapi::getActiveDocumentContext() -> context
# start
context$selection[[1]]$range[1]$start['row'] -> line_index
start_position = rstudioapi::as.document_position(c(line_index,1))
# end
end_position = rstudioapi::as.document_position(c(line_index,Inf))
# range
doc_range = rstudioapi::as.document_range(c(start_position,end_position))
# replace text
rstudioapi::modifyRange(location = doc_range,
text = text,
id = context$id)
}
insert_replace()
insert_replace = function() {
text = "
```{r}
print('print stuff here')
\```
"
rstudioapi::getActiveDocumentContext() -> context
# start
context$selection[[1]]$range[1]$start['row'] -> line_index
start_position = rstudioapi::as.document_position(c(line_index,1))
# end
end_position = rstudioapi::as.document_position(c(line_index,Inf))
# range
doc_range = rstudioapi::as.document_range(c(start_position,end_position))
# replace text
rstudioapi::modifyRange(location = doc_range,
text = text,
id = context$id)
# set cursor position
rstudioapi::setCursorPosition(start_position, id = context$id)
}
insert_replace()
insert_replace = function() {
text = "```{r}
print('print stuff here')
\```
"
rstudioapi::getActiveDocumentContext() -> context
# start
context$selection[[1]]$range[1]$start['row'] -> line_index
start_position = rstudioapi::as.document_position(c(line_index,1))
# end
end_position = rstudioapi::as.document_position(c(line_index,Inf))
# range
doc_range = rstudioapi::as.document_range(c(start_position,end_position))
# replace text
rstudioapi::modifyRange(location = doc_range,
text = text,
id = context$id)
# set cursor position
rstudioapi::setCursorPosition(start_position, id = context$id)
}
insert_replace()
insert_replace = function() {
text = "```{r}
print('print stuff here')
\```
"
rstudioapi::getActiveDocumentContext() -> context
# start
context$selection[[1]]$range[1]$start['row'] -> line_index
start_position = rstudioapi::as.document_position(c(line_index,1))
# end
end_position = rstudioapi::as.document_position(c(line_index,Inf))
# range
doc_range = rstudioapi::as.document_range(c(start_position,end_position))
# replace text
rstudioapi::modifyRange(location = doc_range,
text = text,
id = context$id)
# set cursor position
cursor_position = rstudioapi::as.document_position(c(line_index+1,1))
rstudioapi::setCursorPosition(cursor_position, id = context$id)
}
insert_replace()
