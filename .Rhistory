library(devtools)
use_r('function_from_template.R')
use_r.function = function(file_path) {
text = "
#BEGIN: description
#\' {title placeholder}
#\'
#\' {description placeholder}
#\'
#\' @usage
#\' {usage placeholder}
#\'
#\' @param {param}   \\[{type}\\], {restrictions}
#\' @param {param}   \\[{type}\\], {restrictions}
#\'
#\' @return           [{type}]
#\'
#\' @export
#\' @importFrom magrittr %>%
#END: description
#BEGIN: code
myfun = function(
param1,
param2
) {
#BEGIN: setup params
#END: setup params
#BEGIN: param checks
#END: param checks
#BEGIN: computation
#END: computation
#BEGIN: return
#END: return
}
#END: code
#BEGIN: examples
#\' @examples
#\' #BEGIN: example
#\' # {case description}
#\' {code placeholder}
#\' #END: example
#\'
#\' #BEGIN: example
#\' # {case description}
#\' {code placeholder}
#\' #END: example
#\'
#\' #BEGIN: example
#\' # {case description}
#\' {code placeholder}
#\' #END: example
#END: examples
"
text %>% readr::write_file(file = file_path)
}
use_r.function('reformat_packaging.R')
library(magrittr)
use_package('magrittr')
use_package('readr')
library(readr)
use_r.function('reformat_packaging.R')
edit_file
use_r.function = function(
file_path,
edit_file = TRUE
) {
text = "
#BEGIN: description
#\' {title placeholder}
#\'
#\' {description placeholder}
#\'
#\' @usage
#\' {usage placeholder}
#\'
#\' @param {param}   \\[{type}\\], {restrictions}
#\' @param {param}   \\[{type}\\], {restrictions}
#\'
#\' @return           [{type}]
#\'
#\' @export
#\' @importFrom magrittr %>%
#END: description
#BEGIN: code
myfun = function(
param1,
param2
) {
#BEGIN: setup params
#END: setup params
#BEGIN: param checks
#END: param checks
#BEGIN: computation
#END: computation
#BEGIN: return
#END: return
}
use_r.function = function(
file_path,
edit_file = TRUE
) {
text = "
#BEGIN: description
#\' {title placeholder}
#\'
#\' {description placeholder}
#\'
#\' @usage
#\' {usage placeholder}
#\'
#\' @param {param}   \\[{type}\\], {restrictions}
#\' @param {param}   \\[{type}\\], {restrictions}
#\'
#\' @return           [{type}]
#\'
#\' @export
#\' @importFrom magrittr %>%
#END: description
#BEGIN: code
myfun = function(
param1,
param2
) {
#BEGIN: setup params
#END: setup params
#BEGIN: param checks
#END: param checks
#BEGIN: computation
#END: computation
#BEGIN: return
#END: return
}
#END: code
#BEGIN: examples
#\' @examples
#\' #BEGIN: example
#\' # {case description}
#\' {code placeholder}
#\' #END: example
#\'
#\' #BEGIN: example
#\' # {case description}
#\' {code placeholder}
#\' #END: example
#\'
#\' #BEGIN: example
#\' # {case description}
#\' {code placeholder}
#\' #END: example
#END: examples
"
text %>% readr::write_file(file = file_path)
if(edit_file)
if(rlang::is_interactive())
if(rstudioapi::isAvailable())
rstudioapi::navigateToFile(file_path)
}
use_r.function('reformat_packaging.R')
use_r.function('use_r.function.R')
use_package('rlang')
use_package('rstudioapi')
cat(sprintf('file_path exits: %s', file_path))
use_r.function = function(
file_path,
edit_file = TRUE
) {
#BEGIN: param checks
if (!(length(file_path) == 1))
rlang::abort(message = 'param file_path must satisfy length(v) == 1')
if (!(class(file_path) == 'character'))
rlang::abort(message = "param file_path must satisfy class(v) == 'character'")
if (!(length(edit_file) == 1))
rlang::abort(message = 'param edit_file must satisfy length(v) == 1')
if (!(class(edit_file) == 'logical'))
rlang::abort(message = "param file_path must satisfy class(v) == 'logical'")
#END: param checks
text = "
#BEGIN: description
#\' {title placeholder}
#\'
#\' {description placeholder}
#\'
#\' @usage
#\' {usage placeholder}
#\'
#\' @param {param}   \\[{type}\\], {restrictions}
#\' @param {param}   \\[{type}\\], {restrictions}
#\'
#\' @return           [{type}]
#\'
#\' @export
#\' @importFrom magrittr %>%
#END: description
#BEGIN: code
myfun = function(
param1,
param2
) {
#BEGIN: setup params
#END: setup params
#BEGIN: param checks
#END: param checks
#BEGIN: computation
#END: computation
#BEGIN: return
#END: return
}
""
"\"
""
}
which(1:3 == 0)
length(which(1:3 == 0))
use_package('stringi')
reformat_packaging = function(
file_path,
dry_run = TRUE
) {
#BEGIN: setup params
#END: setup params
#BEGIN: param checks
if (!(length(file_path) == 1))
rlang::abort(message = 'param file_path must satisfy length(v) == 1')
if (!(class(file_path) == 'character'))
rlang::abort(message = "param file_path must satisfy class(v) == 'character'")
if (!(length(dry_run) == 1))
rlang::abort(message = 'param dry_run must satisfy length(v) == 1')
if (!(class(dry_run) == 'logical'))
rlang::abort(message = "param dry_run must satisfy class(v) == 'logical'")
#END: param checks
#BEGIN: computation
file_path %>% readr::read_lines() -> lines
i_begin_description = which(lines == "#BEGIN: description")
i_end_description = which(lines == "#END: description")
i_begin_examples = which(lines == "#BEGIN: examples")
i_end_examples = which(lines == "#END: examples")
i_begin_code = which(lines == "#BEGIN: code")
i_end_code = which(lines == "#END: code")
if (!all(c(length(i_begin_description),length(i_end_description)) == 1))
rlang::abort(message = "'#BEGIN: description' and '#END: description' must occur exactly 1 time in file")
if (!all(c(length(i_begin_examples),length(i_end_examples)) == 1))
rlang::abort(message = "'#BEGIN: examples' and '#END: examples' must occur exactly 1 time in file")
if (!all(c(length(i_begin_code),length(i_end_code)) == 1))
rlang::abort(message = "'#BEGIN: code' and '#END: code' must occur exactly 1 time in file")
lines[
c(
# description goes first
(i_begin_description):(i_end_description),
# then examples
(i_begin_examples):(i_end_examples),
# then code
(i_begin_code):(i_end_code)
)
] -> reformated_lines
if (dry_run) {
reformmated_lines %>% stringi::stri_join(collapse = '\n') %>% cat()
} else {
reformmated_lines %>% readr::write_lines(file = file_path)
}
#END: computation
#BEGIN: return
#END: return
}
reformat_packaging('./reformat_packaging.R')
reformat_packaging = function(
file_path,
dry_run = TRUE
) {
#BEGIN: setup params
#END: setup params
#BEGIN: param checks
if (!(length(file_path) == 1))
rlang::abort(message = 'param file_path must satisfy length(v) == 1')
if (!(class(file_path) == 'character'))
rlang::abort(message = "param file_path must satisfy class(v) == 'character'")
if (!(length(dry_run) == 1))
rlang::abort(message = 'param dry_run must satisfy length(v) == 1')
if (!(class(dry_run) == 'logical'))
rlang::abort(message = "param dry_run must satisfy class(v) == 'logical'")
#END: param checks
#BEGIN: computation
file_path %>% readr::read_lines() -> lines
i_begin_description = which(lines == "#BEGIN: description")
i_end_description = which(lines == "#END: description")
i_begin_examples = which(lines == "#BEGIN: examples")
i_end_examples = which(lines == "#END: examples")
i_begin_code = which(lines == "#BEGIN: code")
i_end_code = which(lines == "#END: code")
if (!all(c(length(i_begin_description),length(i_end_description)) == 1))
rlang::abort(message = "'#BEGIN: description' and '#END: description' must occur exactly 1 time in file")
if (!all(c(length(i_begin_examples),length(i_end_examples)) == 1))
rlang::abort(message = "'#BEGIN: examples' and '#END: examples' must occur exactly 1 time in file")
if (!all(c(length(i_begin_code),length(i_end_code)) == 1))
rlang::abort(message = "'#BEGIN: code' and '#END: code' must occur exactly 1 time in file")
lines[
c(
# description goes first
(i_begin_description):(i_end_description),
# then examples
(i_begin_examples):(i_end_examples),
# then code
(i_begin_code):(i_end_code)
)
] -> reformated_lines
if (dry_run) {
reformated_lines %>% stringi::stri_join(collapse = '\n') %>% cat()
} else {
reformated_lines %>% readr::write_lines(file = file_path)
}
#END: computation
#BEGIN: return
#END: return
}
reformat_packaging('./reformat_packaging.R')
use_r.function('reformat_developing.R')
readr::read_lines('blah')
use_r.function('create_showcase.R')
edit_file('R/create_showcase.R')
edit_file('R/use_md.gitbook.R')
library(bookdown)
?bookdown::gitbook()
use_r.function('use_md.gitbook.R')
check()
tribble(
~name                   , ~implemented, ~paramchecks, ~unittested, ~documented, ~showcased,
# scripting
'`use_r.function`'      ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
'`reformat_packaging`'  ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
'`reformat_developing`' ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
# documentation
'`use_md.gitbook`'      ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
'`create_showcase`'     ,       FALSE,        FALSE,       FALSE,       FALSE,      FALSE,
)
library(tibble)
tribble(
~name                   , ~implemented, ~paramchecks, ~unittested, ~documented, ~showcased,
# scripting
'`use_r.function`'      ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
'`reformat_packaging`'  ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
'`reformat_developing`' ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
# documentation
'`use_md.gitbook`'      ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
'`create_showcase`'     ,       FALSE,        FALSE,       FALSE,       FALSE,      FALSE,
)
library(knitr)
library(tibble)
tribble(
~name                   , ~implemented, ~paramchecks, ~unittested, ~documented, ~showcased,
# scripting
'`use_r.function`'      ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
'`reformat_packaging`'  ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
'`reformat_developing`' ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
# documentation
'`use_md.gitbook`'      ,        TRUE,         TRUE,       FALSE,        TRUE,      FALSE,
'`create_showcase`'     ,       FALSE,        FALSE,       FALSE,       FALSE,      FALSE,
) %>% knitr::kable()
buid()
library(usethis)
2+2
library(devtools)
build()
document()
document()
build()
check()
dir('R')
list.files('R',full.names = TRUE)
list.files('R',full.names = TRUE) %>% purrr::map(reformat_packaging,dry_run = TRUE)
document()
build()
document()
list.files('R',full.names = TRUE) %>% purrr::map(reformat_packaging,dry_run = TRUE)
reformat_packaging('./R/reformat_packaging.R')
list.files('R')
reformat_packaging('./R/create_showcase.R')
reformat_packaging('./R/reformat_developing.R')
reformat_packaging('./R/reformat_packaging.R')
reformat_packaging('./R/use_r.function.R')
reformat_packaging('./R/use_r.function.R')
reformat_packaging('./R/use_r.function.R')
document()
list.files('R',full.names = TRUE) %>% purrr::map(reformat_packaging,dry_run = TRUE)
list.files('R',full.names = TRUE)
document()
build()
document()
check()
cat('/tmp/RtmpY9ejzf/writethat.Rcheck/00install.out')
build()
document()
check()
document()
build()
check()
check()
list.files('../R/')
getwd()
list.files('./R/')
list.files('./R/',full.names = TRUE)
list.files('./R/',full.names = TRUE) %>%
purrr::map(reformat_packaging)
list.files('./R/',full.names = TRUE)
list.files('./R/',full.names = TRUE,include.dirs = FALSE)
list.files('./R/',full.names = TRUE,include.dirs = FALSE) %>%
purrr::map(reformat_packaging)
list.files('./R/',full.names = TRUE,include.dirs = FALSE)
list.files('./R/',full.names = TRUE) %>%
grep(pattern = 'R$')
list.files('./R/',full.names = TRUE) %>%
grepl(pattern = 'R$')
list.files('./R/',full.names = TRUE) %>%
grep(pattern = 'R$',value = TRUE)
list.files('./R/',full.names = TRUE) %>%
grep(pattern = 'R$',value = TRUE) %>%
purrr::map(reformat_packaging)
list.files('./R/',full.names = TRUE) %>%
grep(pattern = 'R$',value = TRUE) %>%
purrr::map(reformat_packaging,dry_run = FALSE)
reformat_packaging
?purrr::map
list.files('./R/',full.names = TRUE) %>%
grep(pattern = 'R$',value = TRUE) %>%
(function(.x) for (x in x) {reformat_packaging(x,dry_run=FALSE)})
list.files('./R/',full.names = TRUE) %>%
grep(pattern = 'R$',value = TRUE) %>%
(function(.x) for (v in .x) {reformat_packaging(v,dry_run=FALSE)})
rm(list=ls())
load_all()
list.files('./R/',full.names = TRUE) %>%
grep(pattern = 'R$',value = TRUE) %>%
(function(.x) for (v in .x) {reformat_developing(v,dry_run=FALSE)})
load_all()
build()
load_all()
# format all files for packaging
list.files('./R/',full.names = TRUE) %>%
grep(pattern = 'R$',value = TRUE) %>%
(function(.x) for (v in .x) {reformat_packaging(v,dry_run=FALSE)})
# format all files for developing
list.files('./R/',full.names = TRUE) %>%
grep(pattern = 'R$',value = TRUE) %>%
(function(.x) for (v in .x) {reformat_developing(v,dry_run=FALSE)})
rm(list=ls())
# format all files for packaging
list.files('./R/',full.names = TRUE) %>%
grep(pattern = 'R$',value = TRUE) %>%
(function(.x) for (v in .x) reformat_packaging(v,dry_run=FALSE))
build()
document()
build()
document()
check()
check()
check()
build()
library(devtools)
build()
check()
document()
build()
